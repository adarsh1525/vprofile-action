name: vprofile_actions
on: workflow_dispatch
env:
    AWS_REGION: us-east-1
    ECR_REPOSITORY: vprofile
    EKS_CLUSTER: vprofile-eks
jobs:
    Testing:
        runs-on: ubuntu-latest
        steps:
           - name: checkout
             uses: actions/checkout@v4
           
           - name: maven 
             run: mvn test

           - name: checkstyle
             run: mvn checkstyle:checkstyle

           - name: java
             uses: actions/setup-java@v4
             with:
                distribution: 'zulu' 
                java-version: '21'

           - name: Setup SonarQube
             uses: warchant/setup-sonar-scanner@v7
            
           - name: SonarQube Scan
             run: sonar-scanner
                -Dsonar.host.url=${{ secrets.SONAR_URL }}
                -Dsonar.login=${{ secrets.SONAR_TOKEN }}
                -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
                -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
                -Dsonar.sources=src/
                -Dsonar.junit.reportsPath=target/surefire-rports/
                -Dsonar.jacoco.reportsPaths=target/jacoco.exec
                -Dsonar.java.binaries=target/test-classes/com/visualpathit/account
                -Dsonar.java.checkstyle.reportPaths=target/checkstyle-results.xml
           
           - name: SonarQube Quality Gate check
             id: sonarqube-quality-gate-check
             uses: sonarsource/sonarqube-quality-gate-action@master
             # Force to fail step after specific time.
             timeout-minutes: 5
             env:
                SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
                SONAR_HOST_URL: ${{ secrets.SONAR_URL }}
    
    Build_and_Publish:
        needs: Testing
        runs-on: ubuntu-latest
        steps:
            - name: checkot
              uses: actions/checkout@v4

            - name: upload image to ECR
              uses: appleboy/docker-ecr-action@master
              with:
                access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
                secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                registry: ${{ secrets.REGISTRY }}
                repo: ${{ env.ECR_REPOSITORY}}
                region: ${{ env.AWS_REGION }}
                tags: latest,${{ github.run_number }}
                daemon_off: false
                dockerfile: ./Dockerfile
                context: ./
    
    DeployToEKS:
      needs: Build_and_Publish
      runs-on: ubuntu-latest
      steps:

        - name: git checkout
          uses: actions/checkout@v4

        - name: Configure AWS Credentials
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ env.AWS_REGION }}

        - name: GET kube config filr
          id: getconfig
          run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER }}

        - name: print config
          run : cat ~/.kube/config

        - name: login to ECR
          run: kubectl create secret docker-registry regcred --docker-server=${{ secrets.REGISTRY }} --docker-username=AWS --docker-password=$(aws ecr get-login-password) 


        - name: Deploy Helm
          uses: bitovi/github-actions-deploy-eks-helm@v1.2.9
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ env.AWS_REGION }}
            cluster-name: ${{ env.EKS_CLUSTER }}
            chart-path: helm/vprofilecharts
            namespace: default
            values: appimage=${{ secrets.REGISTRY }}/${{ env.ECR_REPOSITORY }},apptag=${{ github.run_number }}
            name: vprofile-stack



             